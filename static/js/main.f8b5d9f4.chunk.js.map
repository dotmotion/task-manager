{"version":3,"sources":["context.js","components/Task.js","components/Tasks.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","tasks","filter","task","id","payload","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","name","desc","time","status","dispatch","setState","inherits","createClass","key","value","react_default","a","createElement","props","children","Component","Consumer","Task","deleteItem","_this2","_this$props$task","className","style","cursor","color","float","onClick","bind","Tasks","Fragment","map","components_Task","Header","href","branding","App","context_Provider","components_Header","components_Tasks","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8b5d9f4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_TASK\":\r\n      return {\r\n        ...state,\r\n        tasks: state.tasks.filter(task => task.id !== action.payload)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    tasks: [\r\n      {\r\n        id: 1,\r\n        name: \"Build Task Manager\",\r\n        desc: \"React Application\",\r\n        time: \"01:30\",\r\n        status: \"Work in Progress\"\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Build Portfolio\",\r\n        desc: \"Static Website with SASS\",\r\n        time: \"01:00\",\r\n        status: \"Completed\"\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Build Budget Manager\",\r\n        desc: \"Vanilla JS Budget Application\",\r\n        time: \"00:45\",\r\n        status: \"Completed\"\r\n      }\r\n    ],\r\n    dispatch: action => {\r\n      this.setState(state => reducer(state, action));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Consumer } from \"../context\";\r\n\r\nclass Task extends Component {\r\n  deleteItem = (id, dispatch) => {\r\n    dispatch({ type: \"DELETE_TASK\", payload: id });\r\n  };\r\n\r\n  render() {\r\n    const { id, name, desc, time, status } = this.props.task;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card card-body mb-3 bg-secondary shadow p-3 mb-5 mr-5 bg-white rounded\">\r\n              <h4>\r\n                {name}\r\n\r\n                <i\r\n                  className=\"fas fa-times\"\r\n                  style={{ cursor: \"pointer\", color: \"red\", float: \"right\" }}\r\n                  onClick={this.deleteItem.bind(this, id, dispatch)}\r\n                />\r\n              </h4>\r\n\r\n              <h6>{time}</h6>\r\n\r\n              <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">{desc}</li>\r\n                <li className=\"list-group-item\">Status: {status}</li>\r\n              </ul>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nTask.propTypes = {\r\n  task: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Task;\r\n","import React, { Component } from \"react\";\r\nimport Task from \"./Task\";\r\nimport { Consumer } from \"../context\";\r\n\r\nclass Tasks extends Component {\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { tasks } = value;\r\n          return (\r\n            <React.Fragment>\r\n              {tasks.map(task => (\r\n                <Task key={task.id} task={task} />\r\n              ))}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\n\r\nconst Header = props => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark mb-3 py-0   \">\r\n      <div className=\"navbar-nav\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          {props.branding}\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Tasks from \"./components/Tasks\";\nimport Header from \"./components/Header\";\nimport { Provider } from \"./context\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <div className=\"App\">\n          <Header branding=\"Task Manager\" />\n          <div className=\"container\">\n            <Tasks />\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}